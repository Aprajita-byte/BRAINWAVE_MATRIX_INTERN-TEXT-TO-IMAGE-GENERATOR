"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.route = exports.handler = exports.PROXY_ROUTE = void 0;
const tslib_1 = require("tslib");
const server_1 = require("next/server");
const index_1 = require("./index");
/**
 * The default Next API route for the fal.ai client proxy.
 */
exports.PROXY_ROUTE = index_1.DEFAULT_PROXY_ROUTE;
/**
 * The Next API route handler for the fal.ai client proxy.
 * Use it with the /pages router in Next.js.
 *
 * @param request the Next API request object.
 * @param response the Next API response object.
 * @returns a promise that resolves when the request is handled.
 */
const handler = (request, response) => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
    return (0, index_1.handleRequest)({
        id: 'nextjs-page-router',
        method: request.method || 'POST',
        respondWith: (status, data) => response.status(status).json(data),
        getHeaders: () => request.headers,
        getHeader: (name) => request.headers[name],
        sendHeader: (name, value) => response.setHeader(name, value),
        getBody: () => tslib_1.__awaiter(void 0, void 0, void 0, function* () { return JSON.stringify(request.body); }),
    });
});
exports.handler = handler;
/**
 * The Next API route handler for the fal.ai client proxy on App Router apps.
 *
 * @param request the Next API request object.
 * @returns a promise that resolves when the request is handled.
 */
function routeHandler(request) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const responseHeaders = {};
        return yield (0, index_1.handleRequest)({
            id: 'nextjs-app-router',
            method: request.method,
            respondWith: (status, data) => server_1.NextResponse.json(data, {
                status,
                headers: responseHeaders,
            }),
            getHeaders: () => (0, index_1.fromHeaders)(request.headers),
            getHeader: (name) => request.headers.get(name),
            sendHeader: (name, value) => (responseHeaders[name] = value),
            getBody: () => tslib_1.__awaiter(this, void 0, void 0, function* () { return request.text(); }),
        });
    });
}
exports.route = {
    handler: routeHandler,
    GET: routeHandler,
    POST: routeHandler,
};
//# sourceMappingURL=nextjs.js.map