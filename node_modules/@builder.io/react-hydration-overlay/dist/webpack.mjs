import webpack from "webpack";
import path from "path";
import { fileURLToPath } from "url";
let dirname;
try {
  dirname = __dirname;
} catch (e) {
  dirname = path.dirname(fileURLToPath(import.meta.url));
}
const getEntryPoint = (entryPoint) => {
  if (typeof entryPoint === "string") {
    return [entryPoint];
  } else if (Array.isArray(entryPoint)) {
    return entryPoint;
  } else if (typeof entryPoint === "object" && "import" in entryPoint) {
    const entryImport = entryPoint.import;
    return Array.isArray(entryImport) ? entryImport : [entryImport];
  } else {
    console.error(
      "[ReactHydrationOverlay]: Could not add hydration overlay script due to unexpected entry point: ",
      entryPoint
    );
    return null;
  }
};
async function addScriptToEntryProperty({
  currentEntryProperty,
  isMainAppEntryPoint
}) {
  const newEntryProperty = typeof currentEntryProperty === "function" ? await currentEntryProperty() : { ...currentEntryProperty };
  for (const entryPointName in newEntryProperty) {
    const isBrowserMainAppEntryPoint = isMainAppEntryPoint(entryPointName);
    if (isBrowserMainAppEntryPoint) {
      const currentEntryPoint = newEntryProperty[entryPointName];
      const newEntryPoint = getEntryPoint(currentEntryPoint);
      const injectedScriptPath = path.join(
        dirname,
        "hydration-overlay-initializer.js"
      );
      if (!newEntryPoint || newEntryPoint.includes(injectedScriptPath)) {
        return newEntryProperty;
      }
      newEntryPoint.push(injectedScriptPath);
      newEntryProperty[entryPointName] = newEntryPoint;
    }
  }
  return newEntryProperty;
}
const withHydrationOverlayWebpack = ({ appRootSelector, isMainAppEntryPoint }) => (originalWebpackConfig = {}) => {
  let rawNewConfig = { ...originalWebpackConfig };
  rawNewConfig.entry = async () => addScriptToEntryProperty({
    currentEntryProperty: originalWebpackConfig.entry,
    isMainAppEntryPoint
  });
  rawNewConfig.plugins = [
    ...rawNewConfig.plugins || [],
    new webpack.DefinePlugin({
      "window.BUILDER_HYDRATION_OVERLAY.APP_ROOT_SELECTOR": JSON.stringify(appRootSelector)
    })
  ];
  return rawNewConfig;
};
export {
  withHydrationOverlayWebpack
};
