"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var webpack_exports = {};
__export(webpack_exports, {
  withHydrationOverlayWebpack: () => withHydrationOverlayWebpack
});
module.exports = __toCommonJS(webpack_exports);
var import_webpack = __toESM(require("webpack"));
var import_path = __toESM(require("path"));
var import_url = require("url");
const import_meta = {};
let dirname;
try {
  dirname = __dirname;
} catch (e) {
  dirname = import_path.default.dirname((0, import_url.fileURLToPath)(import_meta.url));
}
const getEntryPoint = (entryPoint) => {
  if (typeof entryPoint === "string") {
    return [entryPoint];
  } else if (Array.isArray(entryPoint)) {
    return entryPoint;
  } else if (typeof entryPoint === "object" && "import" in entryPoint) {
    const entryImport = entryPoint.import;
    return Array.isArray(entryImport) ? entryImport : [entryImport];
  } else {
    console.error(
      "[ReactHydrationOverlay]: Could not add hydration overlay script due to unexpected entry point: ",
      entryPoint
    );
    return null;
  }
};
async function addScriptToEntryProperty({
  currentEntryProperty,
  isMainAppEntryPoint
}) {
  const newEntryProperty = typeof currentEntryProperty === "function" ? await currentEntryProperty() : { ...currentEntryProperty };
  for (const entryPointName in newEntryProperty) {
    const isBrowserMainAppEntryPoint = isMainAppEntryPoint(entryPointName);
    if (isBrowserMainAppEntryPoint) {
      const currentEntryPoint = newEntryProperty[entryPointName];
      const newEntryPoint = getEntryPoint(currentEntryPoint);
      const injectedScriptPath = import_path.default.join(
        dirname,
        "hydration-overlay-initializer.js"
      );
      if (!newEntryPoint || newEntryPoint.includes(injectedScriptPath)) {
        return newEntryProperty;
      }
      newEntryPoint.push(injectedScriptPath);
      newEntryProperty[entryPointName] = newEntryPoint;
    }
  }
  return newEntryProperty;
}
const withHydrationOverlayWebpack = ({ appRootSelector, isMainAppEntryPoint }) => (originalWebpackConfig = {}) => {
  let rawNewConfig = { ...originalWebpackConfig };
  rawNewConfig.entry = async () => addScriptToEntryProperty({
    currentEntryProperty: originalWebpackConfig.entry,
    isMainAppEntryPoint
  });
  rawNewConfig.plugins = [
    ...rawNewConfig.plugins || [],
    new import_webpack.default.DefinePlugin({
      "window.BUILDER_HYDRATION_OVERLAY.APP_ROOT_SELECTOR": JSON.stringify(appRootSelector)
    })
  ];
  return rawNewConfig;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  withHydrationOverlayWebpack
});
